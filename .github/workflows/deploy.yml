name: Deploy to Linux Server

on:
  push:
    branches:
      - main # 또는 코드를 푸시하는 브랜치 이름 (예: master, develop)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17 # 필요에 따라 Java 버전 변경 가능
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Get JAR file name
      id: get_jar_name
      run: echo "::set-output name=jar_name::$(basename $(find target -name '*.jar' ! -name '*tests.jar'))"

    - name: Deploy JAR to server
      uses: appleboy/scp-action@v0.1.6
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "target/${{ steps.get_jar_name.outputs.jar_name }}"
        target: "/path/to/deploy/directory" # <-- 서버에 JAR 파일을 업로드할 경로로 변경하세요.

    - name: Execute on server
      uses: appleboy/ssh-action@v0.1.9
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # 이전 애플리케이션 중지 (예시: PID를 찾아 kill)
          # 실제 애플리케이션 중지 명령어로 변경하세요.
          # 예: pgrep -f "your-app-name" | xargs kill -9 || true
          # 예: systemctl stop your-service-name || true
          echo "Stopping previous application (replace with actual stop command)"

          # 배포 디렉토리로 이동
          cd /path/to/deploy/directory # <-- 서버에 JAR 파일을 업로드한 경로와 동일해야 합니다.

          # 새 JAR 파일 실행 (예시)
          # 실제 애플리케이션 실행 명령어로 변경하세요.
          # 백그라운드 실행을 위해 nohup 또는 systemd 사용을 권장합니다.
          # 예: nohup java -jar ${{ steps.get_jar_name.outputs.jar_name }} > app.log 2>&1 &
          # 예: systemctl start your-service-name
          echo "Starting new application (replace with actual start command)" 